(1*18)
(1*18) + (2*31) + (3*11) + (4*13) + (5*16) + (6*11)
311/100
5+4.25+2.5+4.25
5+4.25+4.5+4.25
setwd("~/GitHub/Emily-Honors-Thesis/Ex 2/2 Collector Output")
options(scipen = 999)
warning = read.csv("warning.csv")
no_warning = read.csv("No Warning.csv")
View(no_warning)
setwd("~/GitHub/Emily-Honors-Thesis/Ex 2/2 Collector Output/Raw EX 2 Output")
#Get the files names
files = list.files(pattern = "*.csv")
#Put them in one dataframe. First apply read.csv, then rbind
dat = do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE)))
#get the number of participants
length(unique(dat$Username)) #70 participants
#Now move back to the 2 collector output folder
#This is where I'll store the combined final output for scoring
setwd('..')
####Clean up the data####
##Drop Unused Columns
dat = dat[ , c(1, 5, 8, 11:15, 16, 19, 24, 26, 33)]
#Get the files names
files = list.files(pattern = "*.csv")
#Put them in one dataframe. First apply read.csv, then rbind
dat = do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE)))
#get the number of participants
length(unique(dat$Username)) #70 participants
#Now move back to the 2 collector output folder
#This is where I'll store the combined final output for scoring
setwd('..')
#Get the files names
files = list.files(pattern = "*.csv")
#Put them in one dataframe. First apply read.csv, then rbind
dat = do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE)))
#get the number of participants
length(unique(dat$Username)) #70 participants
#Get the files names
files = list.files(pattern = "*.csv")
setwd("~/GitHub/Emily-Honors-Thesis/Ex 2/2 Collector Output/Raw Prolific Ex 2")
#Get the files names
files = list.files(pattern = "*.csv")
#Put them in one dataframe. First apply read.csv, then rbind
dat = do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE)))
#get the number of participants
length(unique(dat$Username)) #70 participants
View(dat)
####Clean up the data####
##Drop Unused Columns
dat = dat[ , c(1, 5, 8, 11:15, 16, 19, 24:25, 26, 33)]
#Next, remove buffer trials
dat = subset(dat,
dat$Stimuli.Stimuli.Notes != "Buffer")
#Remove practice trials
dat = subset(dat,
dat$Stimuli.Stimuli.Notes != "PRACTICE")
#Subset out instruction trials -- will need these to check whether participants completed the task correctly
manip.checks = subset(dat,
dat$Procedure.Trial.Type == "FreeRecall")
#Remove instructions
dat = subset(dat,
dat$Procedure.Trial.Type != "Instruct")
#Remove free recall responses
dat = subset(dat,
dat$Procedure.Trial.Type != "FreeRecall")
#Remove picture trials
dat = subset(dat,
dat$Procedure.Trial.Type != "StudyPic")
####Set the data up for scoring####
#Start by subsetting out the recall and JOL data for each dataset
dat.JOL = subset(dat,
dat$Procedure.Trial.Type == "JOL")
dat.Recall = subset(dat,
dat$Procedure.Trial.Type == "Test")
dat.JOL = dat.JOL[order(dat.JOL$Stimuli.Cue), ]
dat.JOL = dat.JOL[order(dat.JOL$Condition.Number), ]
dat.JOL = dat.JOL[order(dat.JOL$Stimuli.Shuffle), ]
dat.Recall = dat.Recall[order(dat.Recall$Stimuli.Cue), ]
dat.Recall = dat.Recall[order(dat.Recall$Condition.Number), ]
dat.Recall = dat.Recall[order(dat.Recall$Stimuli.Shuffle), ]
View(dat)
setwd("~/GitHub/Emily-Honors-Thesis/Ex 2/2 Collector Output")
write.csv(dat, file = "ex2 RTs.csv", row.names = F)
